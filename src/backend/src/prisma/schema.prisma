// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LinkType {
  None
  OneToOne
  OneToMany
  ManyToMany
}

model User {
  id              String @id @default(uuid())
  email           String @unique
  password        String
  nick            String @unique
  stripeAccountId String?
  repositories    Repository[]
  subscriptions   Subscription[]
}

model Repository {
  id         String         @id @default(uuid())
  name       String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  entities   Entity[]
  services   Service[]
  controllers Controller[]
  config Config?            
}

model Entity {
  id String                 @id @default(uuid())
  name String
  repository Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  schema Json
  fromLinks Link[]          @relation("from")
  toLinks   Link[]          @relation("to")
  service Service?
}

model Link {
  id String @id @default(uuid())
  fromEntity Entity @relation("from", fields: [fromEntityId], references: [id], onDelete: Cascade)
  fromEntityId String
  toEntity Entity @relation("to", fields: [toEntityId], references: [id], onDelete: Cascade)
  toEntityId   String
  linkType     LinkType @default(None)
}

model Service {
  id String @id @default(uuid())
  name String
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId String @unique
  controller Controller?
}

model Controller {
  id String @id @default(uuid())
  name String
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String @unique
}

model Subscription {
  id String @id @default(uuid())
  stripeSubsctiptionId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Config {
  id String @id @default(uuid())
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String @unique
  apiPrefix String?
  port   Int
  dbConnectionUri String
}
