// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  email           String @unique
  password        String
  nick            String @unique
  stripeAccountId String?
  repositories    Repository[]
  subscriptions   Subscription[]
  privateRepositoryAccess PrivateRepositoryAccess[]
}

enum RepositoryType {
  PRIVATE
  PUBLIC
}

model Repository {
  id         String         @id @default(uuid())
  name       String
  type       RepositoryType @default(PUBLIC)
  template   TemplateInfo   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String         @unique
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  privateRepositoryAccess  PrivateRepositoryAccess[]
}

model TemplateInfo {
  id                   String @id @default(uuid())
  repository           Repository?
  entityTemplate       EntityTemplate @relation(fields: [entityTemplateId], references: [id], onDelete: Cascade)
  entityTemplateId     String @unique
  serviceTemplate      ServiceTemplate @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade)
  serviceTemplateId    String @unique
  controllerTemplate   ControllerTemplate @relation(fields: [controllerTemplateId], references: [id], onDelete: Cascade)
  controllerTemplateId String @unique
}

model EntityTemplate {
  id       String @id @default(uuid())
  template TemplateInfo?
  value    String?
}

model ServiceTemplate {
  id       String @id @default(uuid())
  template TemplateInfo?
  value    String?
}

model ControllerTemplate {
  id        String @id @default(uuid())
  template TemplateInfo?
  value     String?
}

model Subscription {
  id String @id @default(uuid())
  stripeSubsctiptionId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model PrivateRepositoryAccess {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
}
